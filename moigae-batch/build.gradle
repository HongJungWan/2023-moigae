plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.5'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //Jsoup
    implementation 'org.jsoup:jsoup:1.14.3'

    //아파치 common io
    implementation 'commons-io:commons-io:2.8.0'

    //modelMapper
    implementation 'org.modelmapper:modelmapper:2.4.4'

    //스프링 부트 설정
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Spring Batch 설정
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // Spring Configuration Processor 설정
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'

    // Spring Data JPA 설정
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // DB 설정
    runtimeOnly 'com.h2database:h2'

    //Datasource 설정
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.2'

    // JDBC API 설정
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // 람북 설정
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //스프링 시큐리티
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //Junit5 설정
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.assertj:assertj-core:3.19.0'

    //h2 DB 설정
    testImplementation 'com.h2database:h2'

    // 쿼츠 스케줄러 설정
    implementation 'org.quartz-scheduler:quartz:2.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework:spring-context-support'

    // c3p0 라이브러리 설정
    implementation 'com.mchange:c3p0:0.9.5.4'

    //Mokito 설정
    testImplementation 'org.mockito:mockito-core:3.12.4'
}

test {
    useJUnitPlatform()
}


tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.enabled true
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/dto/**',
                            '**/core/**',
                            '**/*Builder',
                            '**/*Builder.*',
                            '**/request/**',
                            '**/Q**',
                            '**/Index**'
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    def Qdomains = []
    // 패키지 + 클래스명
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            excludes = [] + Qdomains // 제외할 Qdomains 패턴 추가
        }
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
}

test {
    onlyIf { !Boolean.getBoolean("skipTests") }
}